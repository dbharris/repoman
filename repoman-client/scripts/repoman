#!/usr/bin/env python
import sys
import argparse
import os
sys.path.append('../')
sys.path.append('./')
from repoman_client import repoman_client
import os.path

repo = repoman_client.repoman_client()



def ask_yes_or_no(*args, **kwargs):
    try:
        force = kwargs['force']
    except:
        force = False
    print " Are you sure you want to continue?"
    if force:
        print " To prevent this message from displaying, run the command with" 
        print " --force or -f."
    k=raw_input("[y/N]")
    if k in ('y', 'ye', 'yes'):
        return True
    return False
    

def print_help_menu():
    print "repoman-client 0.1.2"
    print "root help menu (pre-subcommand)"
    sys.exit(0)

def main():
    if not len(sys.argv) > 1:
        print_help_menu()
        sys.exit(0)
    else:
        command = sys.argv[1]
        


    if command == 'list-images':
        # DONE
        parser = argparse.ArgumentParser(prog='repoman list-images', description='Lists images on the Repoman repository.', usage='%(prog)s [--long | -l] [--all | -a] [--sharedwith] [--sharedwith [[--user | -u] USER] | [[--group | -g] GROUP]]] [[--user | -u] USER] [[--group | -g] GROUP]')
        parser.add_argument('--long','-l', action='store_true', default=False, help='display full URLs')
        parser.add_argument('--sharedwith', action='store_true', default=False, help='list all images shared with current user')
        parser.add_argument('--all','-a', action='store_true', default=False, help='list all images')
        parser.add_argument('--user','-u', action='store', help='list user\'s images')
        parser.add_argument('--group','-g', action='store', help='list group\'s images')
        args = parser.parse_args(args=sys.argv[2:])
        if args.all:
        
            repo.list_all_images()
        elif args.sharedwith:
            if args.user:
                repo.list_images_sharedwith_user(args.user, args.long)
            elif args.group:
                repo.list_images_sharedwith_group(args.group, args.long)
            else:
                repo.list_images_sharedwith(args.long)
        elif args.user:
            if args.long:
                repo.list_user_images(args.user, args.long)
            else:
                repo.list_user_images(args.user, args.long)
        
        else:
            if args.long:
                repo.list_images(args.long)
            else:
                repo.list_images(args.long)
        
        sys.exit(0)

    elif command == 'list-users':
        parser = argparse.ArgumentParser(prog='repoman list-users', description='Lists users on the Repoman repository.', usage='%(prog)s [--long | -l] [[--group | -g] GROUP]')
        parser.add_argument('--long','-l', action='store_true', default=False, help='display full user information')
        parser.add_argument('--group','-g', action='store', help='display users in group')
        args = parser.parse_args(args=sys.argv[2:])
        if args.group:
            repo.list_group_members(args.group, args.long)
        else:
            repo.list_users(args.long)
        sys.exit(0)
        
        
    elif command == 'list-groups':
        parser = argparse.ArgumentParser(prog='repoman list-groups', description='Lists groups on the Repoman repository.', usage='%(prog)s [--long | -l] [--all | -a] [[--user | -u] USER]')
    	#DONE
        parser.add_argument('--long','-l', action='store_true', default=False, help='display full group information')
        parser.add_argument('--all','-a', action='store_true', default=False, help='display all groups')
        parser.add_argument('--user','-u', help='display groups that user is a member of')
        args = parser.parse_args(args=sys.argv[2:])
        if args.user:
            repo.list_users_groups(args.user, args.long)
        elif args.all:
            repo.list_groups(args.long)
        else:
            repo.list_users_groups(repo.return_username(), args.long)
        sys.exit(0)
        

    elif command == 'whoami':
        # long
        parser = argparse.ArgumentParser(prog='repoman whoami', description='List current username and user information.', usage='%(prog)s [--long | -l])')
        parser.add_argument('--long','-l', default=False, action="store_true", help='displays current user information')
        args = parser.parse_args(args=sys.argv[2:])
        if args.long:
            repo.get_user()
        else:
            repo.get_username()
        sys.exit(0)
    
          
    elif command == 'create-user':
        # --metavar value
        # minimum: user_name, email, cert_dn, full_name
        parser = argparse.ArgumentParser()
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        if not set (('user_name','email','cert_dn','full_name')) <= set(metadata):
            print 'usage: repoman create-user --user_name USERNAME --email USER_EMAIL --cert_dn USER_CERT_DN --full_name "FULL NAME"'
            print " "
            print "Creates users on the Repoman repository."
            print " "
            print "required arguments:"
            print "  --user_name           new user's username"
            print "  --email               new user's email address"
            print "  --cert_dn             new user's distinguished name"
            print "  --full_name           new user's full name in quotes"
            print ""
            print "optional arguments:"
            print "   -h, --help           show this help message and exit"
            sys.exit(0)
        print "Creating user with metadata:"
        for item in metadata:
            print item+": "+metadata[item]
        repo.create_user(metadata)
        sys.exit(0)
        
    elif command == 'create-group':
        # --metavar value
        # minimum: name
        parser = argparse.ArgumentParser()
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        if not set (('name')) <= set(metadata):
            print 'usage: repoman create-group --name GROUP_NAME'
            print " "
            print "Creates groups on the Repoman repository."
            print " "
            print "required arguments:"
            print "   --name               name of group to be created"
            print ""
            print "optional arguments:"
            print "   -h, --help           show this help message and exit"
            
            sys.exit(0)
            
        print "Creating group with metadata:"
        for item in metadata:
            print item+": "+metadata[item]
        repo.create_group(metadata)
        sys.exit(0)
        
    elif command == 'remove-user':
        parser = argparse.ArgumentParser(prog='repoman remove-user', description='Removes a user from the Repoman repository.', usage='%(prog)s user [--force | -f]')
        parser.add_argument('user', help='user to remove')
        parser.add_argument('--force','-f', action='store_true', default=False, help='overrides the confirmation message')
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_user(args.user)
        else:
            print 'Deleting user '+args.user+'...'
            if ask_yes_or_no(force=True):
                repo.remove_user(args.user)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
            
    elif command == 'remove-group':
        parser = argparse.ArgumentParser(prog='repoman remove-group', description='Removes a group from the Repoman repository.', usage='%(prog)s group [--force | -f]')
        parser.add_argument('group')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_group(args.group)
        else:
            print 'Deleting user '+args.group+'...'
            if ask_yes_or_no(force=True):
                repo.remove_group(args.group)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
        
    elif command == 'remove-image':
        parser = argparse.ArgumentParser(prog='repoman remove-image', description='Removes an from the Repoman repository.', usage='%(prog)s [user/]image [--force | -f]')
        parser.add_argument('image')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_image(args.image)
        else:
            print 'Deleting image '+args.image+'...'
            if ask_yes_or_no(force=True):
                repo.remove_image(args.image)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
        

        
    elif command == 'modify-image':
        parser = argparse.ArgumentParser(prog='repoman modify-image', description='Updates the metadata for an image in the Repoman repository.', usage='%(prog)s [user/]image [--META_KEY META_VALUE]')
        parser.add_argument('image', help='image to modify')
        args = parser.parse_known_args(args=sys.argv[2:])
        image = args[0].image
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        metadata['name'] = image
        #Server is expecting Bool objects for readonly
        try:
            readonly = metadata['readonly']
            true_values = ['t', 'True', 'true']
            if true_values.count(metadata['readonly']):
                metadata['readonly'] = True
            else:
                metadata['readonly'] = False
        
        except:
            metadata['readonly'] = False
            
        images = repo.list_images_raw()
        exists = False
        for image in images:
            if metadata['name'] == image.split('/')[6]:
                exists = True
        if not exists:
            print "This image does not exist."
            sys.exit(1)
                
                
        print "Updating image "+metadata['name']+" with metadata: "
        
        
                
        for key in metadata:
             print key+": "+str(metadata[key])
        repo.update_metadata(metadata=metadata, exists=True)
        sys.exit(0)

        
    elif command == 'download-image':
        parser = argparse.ArgumentParser(prog='repoman download-image', description='Downloads an image from the Repoman repository.', usage='%(prog)s [user/]image [[--dest | -d] DESTINATION]')
        parser.add_argument('image', help='image to download')
        parser.add_argument('--dest','-d', default='./', help='destination to save file to. defaults to current directory.')
        args = parser.parse_args(args=sys.argv[2:])
        images = repo.list_images_raw()
        exists = False
        for image in images:
            if metadata['name'] == image.split('/')[6]:
                exists = True
        if not exists:
            print "This image does not exist."
            sys.exit(1)
        if not os.path.split(args.dest)[1]:
            if '/' in args.image:
                args.dest = args.dest+args.image.split('/')[1]
        repo.get(args.image,args.dest)
        sys.exit(0)
                  

    elif command == 'describe-image':
        parser = argparse.ArgumentParser(prog='repoman describe-image', description='Prints detailed information about an image.', usage='%(prog)s [user/]image')
        # DONE
        parser.add_argument('image', help='image to describe')
        args = parser.parse_args(args=sys.argv[2:])
        
        if '/' in args.image:
            user = args.image.split('/')[0]
            image = args.image.split('/')[1]
            repo.describe_image(image, user=user)
        else:
            image = args.image
            repo.describe_image(args.image)
            sys.exit(0)
            
    elif command == 'describe-user':
        parser = argparse.ArgumentParser(prog='repoman describe-user', description='Prints detailed information about a user.', usage='%(prog)s user')
    	#DONE
        parser.add_argument('user', help='user to describe')
        args = parser.parse_args(args=sys.argv[2:])
        repo.describe_user(args.user)
        sys.exit(0)
        
    elif command == 'describe-group':
        parser = argparse.ArgumentParser(prog='repoman describe-group', description='Prints detailed information about a group.', usage='%(prog)s group')
    	#DONE
        parser.add_argument('group')
        args = parser.parse_args(args=sys.argv[2:])
        repo.describe_group(args.group)
        sys.exit(0)
        
    elif command == 'modify-user':
        parser = argparse.ArgumentParser(prog='repoman modify-user', description='Updates the metadata for a user in the Repoman repository.', usage='%(prog)s user [--META_KEY META_VALUE]')
        parser.add_argument('user')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print "Modifying user "+args[0].user+" with metadata:"
        for item in metadata:
            print item+": "+metadata[item]
        repo.modify_user(args[0].user, metadata)
        sys.exit(0)

    elif command == 'modify-group':
        parser = argparse.ArgumentParser(prog='repoman modify-group', description='Updates the metadata for a group in the Repoman repository.', usage='%(prog)s group [--META_KEY META_VALUE]')
        parser.add_argument('group')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print args[0].group
        print metadata
        repo.modify_group(args[0].group, metadata)
        sys.exit(0)     
        
        
    elif command == 'create-image':
        parser = argparse.ArgumentParser(prog='repoman create-image', description='Creates an image on the Repoman repository.  The minimum required metadata is --name NAME.  If a file to upload is specified but a name is not, the name is set to the filename.', usage='%(prog)s [--file FILENAME] [--META_KEY VALUE]')
        # [--file FILE] [--METAVAR VALUE ...]
        parser.add_argument('--file', action='store', help='specifies a full to upload. if no name specified, defaults to filename')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        try:
            name = metadata['name']
        except:
            try:
                metadata['name'] = os.path.split(args[0].file)[1]
                name = metadata['name']
            except:
                print 'usage: repoman create-image [--file FILENAME] [--META_KEY VALUE]'
                print " "
                print "Creates an image on the Repoman repository."
                print "The minimum required metadata is --name NAME."
                print "If a file to upload is specified but a name is not, the name is set to the filename."
                print " "
                print "optional arguments:"
                print "   --file FILENAME      upload an image file with the metadata"
                print "   --META_KEY VALUE     add metadata to the image"     
                print "   -h, --help           show this help message and exit"
                
                sys.exit(0)
                
        
        #Server is expecting Bool objects for readonly
        try:
            readonly = metadata['readonly']
            true_values = ['t', 'True', 'true']
            if true_values.count(metadata['readonly']):
                metadata['readonly'] = True
            else:
                metadata['readonly'] = False
        
        except:
            metadata['readonly'] = False
        
        
        
            sys.exit(1)            
        print "Creating image "+name+" with metadata: "
        for key in metadata:
            print key+": "+str(metadata[key])
        repo.update_metadata(metadata=metadata, exists=False)
        if args[0].file is not None:
            print "Uploading image file "+args[0].file+'...'
            if not os.path.isfile(args[0].file):
                print "The file you specified does not exist."
                sys.exit(1)
            else:
                repo.upload_image(args[0].file, image=metadata['name'], metadata=metadata)
                sys.exit(0)
                
            
        sys.exit(0)
        
    elif command == 'share-image':
        parser = argparse.ArgumentParser(prog='repoman share-image', description='Shares an image with another user or group.', usage='%(prog)s image [[--user | -u] USERNAME] [[ --group | -g] GROUPNAME]')
        parser.add_argument('image', help='image to share')
        parser.add_argument('--user','-u', help='user to share with')
        parser.add_argument('--group','-g', help='group to share with')
        args = parser.parse_args(args=sys.argv[2:])
        if args.user:
            print "Sharing image "+args.image+" with user "+args.user+"..."
            repo.share_user(args.image, args.user)
            sys.exit(0)
        if args.group:
            print "Sharing image "+args.image+" with group "+args.group+"..."
            repo.share_group(args.image,args.group)
            sys.exit(0)
        sys.exit(0)
        
                
    elif command == 'unshare-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('image')
        parser.add_argument('--user','-u')
        parser.add_argument('--group','-g')
        args = parser.parse_args(args=sys.argv[2:])
        if args.user:
            print "Unsharing image "+args.image+" with user "+args.user+"..."
            repo.unshare_user(args.image, args.user)
            sys.exit(0)
        if args.group:
            print "Unsharing image "+args.image+" with group "+args.group+"..."
            repo.unshare_group(args.image,args.group)
            sys.exit(0)
        sys.exit(0)
        
    
    elif command == 'snapshot-system':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('--upload', action='store_true', default=False)
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        if args[0].upload:
            try:
                name = metadata['name']
            except:
                print "Please enter at least a name as metadata with --name IMAGE_NAME."
                sys.exit(1)
            images = repo.list_images_raw()
            exists = False
            for image in images:
                if metadata['name'] == image.split('/')[6]:
                    exists = True
                    if not args[0].force:
                        print 'WARNING!! This image already exists on the repository.'
                        if not ask_yes_or_no(force=True):
                            print 'Exiting repoman-client.'
                            sys.exit(2)
        
            print "Snapshotting system and uploading with the following metadata:"
            for key in metadata:
                print key+": "+metadata[key]
            repo.save_image(metadata=metadata,replace=exists, snapshot_complete=False)
            sys.exit(0)
        else:
            repo.snapshot_system()
            print "Local filesystem synced and prepared for upload at "+self.mountpount+"."
            print "To upload this image to the repository, run repoman upload-snapshot --META VALUE."
            sys.exit(0)
            
    elif command == 'upload-snapshot':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        try:
            name = metadata['name']
        except:
            print "Please enter at least a name as metadata with --name IMAGE_NAME."
            sys.exit(1)
            
        images = repo.list_images_raw()
        exists = False
        for image in images:
            if metadata['name'] == image.split('/')[6]:
                exists = True
                if not args[0].force:
                    print 'WARNING!! This image already exists on the repository.'
                    if not ask_yes_or_no(force=True):
                        print 'Exiting repoman-client.'
                        sys.exit(2)
        
        print "Snapshotting image "+name+" with the following metadata:"
        for key in metadata:
            print key+": "+metadata[key]
        repo.upload_snapshot(metadata=metadata,replace=replace, snapshot_complete=True)
        sys.exit(0)
        
        
        
    elif command == 'upload-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('image')
        parser.add_argument('--file', required=True)
        args = parser.parse_args(args=sys.argv[2:])
        
        if not os.path.isfile(args.file):
            print "The file "+args.file+" does not exist.  Please try again."
            sys.exit(0)
            
        images = repo.list_images_raw()
        exists = False
        for image in images:
            if args.image == image.split('/')[6]:
                exists = True
        if not exists:
            print "This image does not exist."
            sys.exit(0)
            
        repo.upload_image(args.file,image=args.image)
        
        sys.exit(0)
        
    elif command == 'add-users-to-group':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        parser.add_argument('--users','-u', nargs='+')
        args = parser.parse_args(args=sys.argv[2:])
        repo.add_users_to_group(args.group, args.users)
        sys.exit(0)
        
    elif command == 'remove-users-from-group':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        parser.add_argument('--users','-u', nargs='+')
        args = parser.parse_args(args=sys.argv[2:])
        repo.remove_users_from_group(args.group, args.users)
        sys.exit(0)
        
    elif command == 'add-permissions':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        parser.add_argument('--permissions', nargs='+')
        args = parser.parse_args(args=sys.argv[2:])
        if not args.permissions:
            print "Please enter at least one permission to add."
            sys.exit(1)
        repo.add_permissions(args.group, args.permissions)
        sys.exit(0)
        
    elif command == 'remove-permissions':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        parser.add_argument('--permissions', nargs='+')
        args = parser.parse_args(args=sys.argv[2:])
        if not args.permissions:
            print "Please enter at least one permission to remove."
            sys.exit(1)
        repo.remove_permissions(args.group, args.permissions)
        sys.exit(0)


    elif command == 'help' or command == '--help':
        print_help_menu()
        sys.exit(0)
    
    else:
        print "Command not recognized."
        print_help_menu()
        sys.exit(0)

if __name__ == "__main__":
    main() 
