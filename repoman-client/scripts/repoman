#!/usr/bin/env python
import sys
import argparse
import os
sys.path.append('../')
sys.path.append('./')
from repoman_client import repoman_client
import os.path

repo = repoman_client.repoman_client()



def ask_yes_or_no(*args, **kwargs):
    try:
        force = kwargs['force']
    except:
        force = False
    print " Are you sure you want to continue?"
    if force:
        print " To prevent this message from displaying, run the command with" 
        print " --force or -f."
    k=raw_input("[y/N]")
    if k in ('y', 'ye', 'yes'):
        return True
    return False
    

def print_help_menu():
    print "repoman-client 0.1.2"
    print "root help menu (pre-subcommand)"
    sys.exit(0)

def main():
    if not len(sys.argv) > 1:
        print_help_menu()
        sys.exit(0)
    else:
        command = sys.argv[1]
        


    if command == 'list-images':
        # DONE
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('--long', action='store_true', default=False)
        parser.add_argument('--sharedwith', action='store')
        parser.add_argument('--all', action='store_true', default=False)
        parser.add_argument('--user', action='store')
        parser.add_argument('--group', action='store')
        args = parser.parse_args(args=sys.argv[2:])
        if args.all:
        
            repo.list_all_images()
        elif not args.user is None:
            if args.long:
                repo.list_user_images(args.user, args.long)
            else:
                repo.list_user_images(args.user, args.long)
        
        else:
            if args.long:
                repo.list_images(args.long)
            else:
                repo.list_images(args.long)
        
        sys.exit(0)

    if command == 'list-users':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('--long', action='store_true', default=False)
        parser.add_argument('--group', action='store')
        args = parser.parse_args(args=sys.argv[2:])
        if not args.group is None:
            repo.list_group_members(args.long, args.group)
        else:
            repo.list_users(args.long)
        sys.exit(0)
        
        
    if command == 'list-groups':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
    	#DONE
        parser.add_argument('--long', action='store_true', default=False)
        #parser.add_argument('--group', action='store')
        args = parser.parse_args(args=sys.argv[2:])
        repo.list_groups(args.long)
        sys.exit(0)
        

    if command == 'whoami':
        # long
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        if options.long:
            repo.get_user()
        else:
            repo.get_username()
        sys.exit(0)
    
          
    if command == 'create-user':
        # --metavar value
        # minimum: user_name, email, cert_dn, full_name
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print "Creating user with metadata:"
        for item in metadata:
            print item+": "+metadata[item]
        repo.create_user(metadata)
        sys.exit(0)
        
    if command == 'create-group':
        # --metavar value
        # minimum: name
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print "Creating group with metadata:"
        for item in metadata:
            print item+": "+metadata[item]
        repo.create_group(metadata)
        sys.exit(0)
        
    if command == 'remove-user':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('user')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_user(args.user)
        else:
            print 'Deleting user '+args.user+'...'
            if ask_yes_or_no(force=True):
                repo.remove_user(args.user)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
            
    if command == 'remove-group':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_group(args.group)
        else:
            print 'Deleting user '+args.group+'...'
            if ask_yes_or_no(force=True):
                repo.remove_group(args.group)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
        
    if command == 'remove-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('image')
        parser.add_argument('--force','-f', action='store_true', default=False)
        args = parser.parse_args(args=sys.argv[2:])
        if args.force:
            repo.remove_image(args.image)
        else:
            print 'Deleting image '+args.image+'...'
            if ask_yes_or_no(force=True):
                repo.remove_image(args.image)
            else:
                print 'Exiting repoman.'
        sys.exit(0)
        

        
    if command == 'modify-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # [USER/]IMAGE [--METAVAR VALUE ...]
        parser.add_argument('image')
        args = parser.parse_known_args(args=sys.argv[2:])
        image = args[0].image
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        metadata['name'] = image
        #Server is expecting Bool objects for readonly
        try:
            readonly = metadata['readonly']
            true_values = ['t', 'True', 'true']
            if true_values.count(metadata['readonly']):
                metadata['readonly'] = True
            else:
                metadata['readonly'] = False
        
        except:
            metadata['readonly'] = False
            
        print "Updating image "+metadata['name']+" with metadata: "
        for key in metadata:
             print key+": "+str(metadata[key])
        repo.update_metadata(metadata=metadata, exists=True)
        sys.exit(0)

        
    if command == 'download-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --image [USER/]IMAGE [--dest DEST]
        parser.add_argument('image')
        parser.add_argument('--dest', default='./')
        args = parser.parse_args(args=sys.argv[2:])
        repo.get(args.image,args.dest)
        sys.exit(0)
                  

    if command == 'describe-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # DONE
        parser.add_argument('image')
        args = parser.parse_args(args=sys.argv[2:])
        
        if '/' in args.image:
            user = args.image.split('/')[0]
            image = args.image.split('/')[1]
            resp = repo.describe_image(image, user=user)
        else:
            image = args.image
            resp = repo.describe_image(args.image)
        if resp == 404:
            print '\n'
            print "This image does not exist."
            repo.list_images(False)
            print '\n'
            sys.exit(1)
        else:
            print '\n'
            for key in resp:
                print key+": \t",
                print str(resp[key])
            print '\n'
            sys.exit(0)
            
    if command == 'describe-user':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
    	#DONE
        parser.add_argument('user')
        args = parser.parse_args(args=sys.argv[2:])
        repo.describe_user(args.user)
        sys.exit(0)
        
    if command == 'describe-group':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
    	#DONE
        parser.add_argument('group')
        args = parser.parse_args(args=sys.argv[2:])
        repo.describe_group(args.group)
        sys.exit(0)
        
    if command == 'modify-user':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('user')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print args[0].user
        print metadata
        repo.modify_user(args[0].user, metadata)
        sys.exit(0)

    if command == 'modify-group':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('group')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        print args[0].group
        print metadata
        repo.modify_group(args[0].group, metadata)
        sys.exit(0)     
        
        
    if command == 'create-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # [--file FILE] [--METAVAR VALUE ...]
        parser.add_argument('--file', action='store')
        args = parser.parse_known_args(args=sys.argv[2:])
        metadata = dict([(args[1][i].strip('-'), args[1][i+1]) for i in range(0, len(args[1]) - 1, 2)])
        #Server is expecting Bool objects for readonly
        try:
            readonly = metadata['readonly']
            true_values = ['t', 'True', 'true']
            if true_values.count(metadata['readonly']):
                metadata['readonly'] = True
            else:
                metadata['readonly'] = False
        
        except:
            metadata['readonly'] = False
        try:
            try:
                name = metadata['name']
            except:
                metadata['name'] = args[0].file
                name = metadata['name']
        except:
            print "Please enter either a filename or a name as part of the metadata."
            sys.exit(1)            
        try:
            print "Creating image "+name+" with metadata: "
        except:
            print "Please specify metadata in the form --metavar value."
            sys.exit(1)
        for key in metadata:
            print key+": "+str(metadata[key])
        repo.update_metadata(metadata=metadata, replace=False)
        if args[0].file is not None:
            print "Uploading image file "+args[0].file+'...'
            if not os.path.isfile(args[0].file):
                print "The file you specified does not exist."
                sys.exit(1)
            else:
                repo.upload_image(args[0].file, name=metadata['name'], metadata=metadata)
                sys.exit(0)
                
            
        sys.exit(0)
        
    if command == 'share-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --name [USER/]NAME (--user USER | --group GROUP)
                
        if not options.username and not options.group:
            print "Please user either a user or a group to share the image with."
            print "i.e. share --user username or share --group groupname --name imagename"
            sys.exit(0)
        if options.username and options.group:
            print "Please select either a user or a group to share to."
            sys.exit(0)
        if not options.image:
            image_list = repo.list_images_raw()
            for i in xrange(len(repo.list_images_raw())):
                image_list[i] = repo.list_images_raw()[i].split('/')[6]
            print "Please enter an image to share."
            print "i.e. share --user username --name imagename"
            print "The images you own on the server are:"
            for item in image_list:
                print item
            sys.exit(2)
        if options.username:
            repo.share_user(user=options.username,image=options.image)
            sys.exit(0)
        if options.group:
            repo.share_group(group=options.group,image=options.image)
            sys.exit(0)
        sys.exit(0)
        
                
    if command == 'unshare-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --name [USER/]NAME (--user USER | --group GROUP)
        
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]
        if not options.username and not options.group:
            print "Please user either a user or a group to unshare the image with."
            print "i.e. unshare --user username or unshare --group groupname --name imagename"
            sys.exit(0)
        if options.username and options.group:
            print "Please select either a user or a group to unshare to."
            sys.exit(0)
        if not options.image:
            print "Please enter an image to unshare."
            print "i.e. unshare --user username --name imagename"
            print "The images you own on the server are:"
            for item in image_list:
                print item
            sys.exit(0)
        exists = False
        for item in image_list:
            if item == options.image:
                exists = True
        if not exists:
            print "That image does not exist on the repository."
            print "The images you own on the server are:"
            for item in image_list:
                print item
            sys.exit(0) 
        if options.username:    
            repo.unshare_user(user=options.username,image=options.image)
            sys.exit(2)
        if options.group:
            repo.unshare_group(group=options.group,image=options.image) 
            sys.exit(2)
        sys.exit(0)
        
    
    if command == 'snapshot-system':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --noupload --METAVARS VALUE
        
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]

        try:
            name = metadata['name']

        except:
            print '''    Please either specify an image name with the --name flag
        or specify metadata with --name [name] --os_type [os_type] etc..
        The images available to you are:
                  ''' 
            for item in image_list:
                print item
            print '''
        select one of these images to overwrite, or specify a new image name
        see --help for more details
                  '''
            sys.exit(2)
        replace=False
        for item in image_list:
            if item == name:
                replace=True
                if not force:
                    print 'WARNING!! This image already exists on the repository.'
                    if not ask_yes_or_no(force=True):
                        print 'Exiting repoman-client.'
                        sys.exit(2)
        print "Saving image "+name+" with the following metadata:"
        for key in metadata:
            print key+": "+metadata[key]
        repo.save_image(metadata=metadata,replace=replace)
        sys.exit(0)
        
        
        
    if command == 'upload-image':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        parser.add_argument('image')
        parser.add_argument('--file', required=True)
        args = parser.parse_args(args=sys.argv[2:])
        if not os.path.isfile(args.file):
            print "The file "+args.file+" does not exist.  Please try again."
            sys.exit(0)
        else:
            repo.upload_image(args.file,image=args.image)
        
        sys.exit(0)
        
        
        
    if command == 'group-add-user':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --group GROUP --user USER
        
        print 'todo'
        #repo.group_add_user(args)
        sys.exit(0)
        
    if command == 'group-rm-user':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --group GROUP --user NAME
        
        print 'todo'
        #repo.group_rm_user(args)
        sys.exit(0)
        
    if command == 'group-add-perm':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --group GROUP --perm PERM
        
        print 'todo'
        #repo.group_add_perm(args)
        sys.exit(0)
        
    if command == 'group-rm-perm':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        # --group GROUP --perm PERM
        
        print 'todo'
        #repo.group_rm_perm(args)
        sys.exit(0)
                

    if command == 'help' or command == '--help':
        parser = argparse.ArgumentParser(description='Client for Repoman image repository.')
        print_help_menu()
        sys.exit(0)
    
    else:
        print "Command not recognized."
        print_help_menu()
        sys.exit(0)

if __name__ == "__main__":
    main() 
