#!/usr/bin/env python
import sys
import optparse
import os
from repoclient import repoclient

repo = repoclient.repoclient()

parser = optparse.OptionParser()

def ask_yes_or_no(*args, **kwargs):
    try:
        force = kwargs['force']
    except:
        force = False
    print " Are you sure you want to continue?"
    if force:
        print " To prevent this message from displaying, run the comming with" 
        print " --force or -f."
    k=raw_input("[y/N]")
    if k in ('y', 'ye', 'yes'):
        return True
    return False


def main():
    if not len(sys.argv) > 1:
        print "\n"
        print "Repoman Client"
        print "Currently implemented commands:"
        print "repoman list [--all]"
        print "repoman getuser [--all]"
        print "repoman info [--name] "
        print "repoman save [--name] [--(another other metadata tags)]"
        print "\n"
        print "All defaults are set in repoclient.conf, set in /etc/repoclient/repoclient.conf by default"
        print "\n"
        sys.exit(0)
    else:
        command = sys.argv[1]
        # args = sys.argv[1:]

    if command == 'list':
        parser.add_option('-l','--long',dest='long',default=False)
        parser.add_option('-a','--all',dest="all",default=False,action="store_true")
        options, args = parser.parse_args(args=sys.argv[2:])
        if options.all:
            repo.list_all_images()
        else:
            repo.list_images()
        sys.exit(0)

    if command == 'save':
        # parser.add_option('-n','--name',action="store", type="string",dest="name")
        # parser.add_option('-m','--metadata',dest="metadata",default=False,action="store_true")
        # options, args = parser.parse_args(args=sys.argv[2:])
        args = sys.argv
        metadata = dict([(args[i].strip('-'), args[i+1]) for i in range(2, len(args) - 1, 2)])
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]

        try:
            # Try to get the name from command line arguements
            name = metadata['name']

        except:
            # If the name has NOT been specified 
            print '''    Please either specify an image name with the --name flag
        or specify metadata with --name [name] --os_type [os_type] etc..
        The images available to you are:
                  ''' 
            for item in image_list:
                print item
            print '''
        select one of these images to overwrite, or specify a new image name
        see --help for more details
                  '''
            sys.exit(2)
        replace=False
        for item in image_list:
            if item == name:
                replace=True
                print 'WARNING!! This image already exists on the repository.'
                if not ask_yes_or_no():
                    print 'Exiting repoclient.'
                    sys.exit(2)
        print "Saving image "+name+" with the following metadata:"
        for key in metadata:
            print key+": "+metadata[key]
        repo.save_image(metadata=metadata,replace=replace)
        # sends to repoclient as kwargs


    if command == 'getuser':
        parser.add_option('-a','--all',dest="all",default=False,action="store_true")
        options, args = parser.parse_args(args=sys.argv[2:])
        if options.all:
            repo.list_users()
            sys.exit(0)
        else:
            repo.get_user()
        sys.exit(0)

    if command == 'info':
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]

        parser.add_option('-n','--name',action="store",type="string",dest="name")
        options, args = parser.parse_args(args=sys.argv[2:])
        if options.name:
            resp = repo.get_image_info(options.name)
            print '\n'
            for key in resp:
                print "  "+key+": \t",
                print str(resp[key])
            print '\n'
            sys.exit(0)           
        else:
            print "Please run this command as info --name image_name, where image_name is one of the following:"
            for item in image_list:
                print item
            sys.exit(2)

            
    if command == 'upload':
        # Uploading MUST be done in this order: repomain upload --file [metadata]
        parser.add_option('-f','--file',action="store",type="string",dest="file")
        options, args = parser.parse_args(args=sys.argv[2:4])
        args = sys.argv
        metadata = dict([(args[i].strip('-'), args[i+1]) for i in range(4, len(args) - 1, 2)])
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]

        if not options.file:
            print "Uploading an image requires both the name of the image from previously-uploaded metadata and the file to upload:"
            print "Example:  repoman upload --file /opt/images/my_image.img.gz --name whatever (any other metadata)"
            sys.exit(2)
        else:
            print "Uploading..."
            try:
                name = metadata['name']
            except:
                print "The minimum metadata needed to upload an image is the name, specified with --name"
                sys.exit(0)
            replace=False
            for item in image_list:
                if item == metadata['name']:
                    replace=True
                    print 'WARNING!! This image already exists on the repository.'
                    if not ask_yes_or_no():
                        print 'Exiting repoclient.'
                        sys.exit(2)
            repo.upload_image(options.file, replace=replace, name=name, metadata=metadata)

    if command == 'get':
        parser.add_option('-n','--name',action="store",type="string",dest="name")
        parser.add_option('-p','--path',action="store",type="string",dest="path")
        options, args = parser.parse_args(args=sys.argv[2:])
        image_list = repo.list_images_raw()
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]
        if not options.name:
            print "Please enter on of the following names:"
            for item in image_list:
                print item
        else:
            exists = False
            for item in image_list:
                if item == options.name:
                    exists = True
            if exists:
                if options.path:
                    repo.get(name=options.name,path=options.path)
                else:
                    repo.get(name=options.name)
            else: 
               print "Image did not match any of your images on the server."
               print "Please enter on of the following names:"           
               for item in image_list:
                   print item
                            

    if command == "update":
        args = sys.argv
        if len(args) < 3:
            print "help menu"
            sys.exit(0)
        force = False
        for arg in args:
            if arg == '--force':
                force = True
                args.remove(arg)
        metadata = dict([(args[i].strip('-'), args[i+1]) for i in range(2, len(args) - 1, 2)])
        try:
            name = metadata['name']
        except:
            print "Please enter at least a name as metadata."
            sys.exit(0)
        image_list = repo.list_images_raw()
        exists = False
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]
            if image_list[i] == name:
                exists = True
        if not force and exists:
            print "Warning! This image name already has metadata on the server."
            if ask_yes_or_no(force=True):
                print "Updating image "+name+" with metadata: "
                for key in metadata:
                    print key+": "+metadata[key]
                repo.update_metadata(metadata=metadata, exists=exists)
            else:
                print "Exiting repoman."
                sys.exit(0)
        else:
            print "Updating image "+name+" with metadata: "
            for key in metadata:
                print key+": "+metadata[key]
            repo.update_metadata(metadata=metadata, exists=exists)
            
    if command == "delete":
        parser.add_option('-n','--name',action="store", type="string",dest="name")
        parser.add_option('-f','--force',dest="force",default=False,action="store_true")
        options, args = parser.parse_args(args=sys.argv[2:])    
        if not options.name:
            print "Please specify a name with --name image_name"
            sys.exit(0)
        image_list = repo.list_images_raw()
        exists = False
        for i in xrange(len(repo.list_images_raw())):
            image_list[i] = repo.list_images_raw()[i].split('/')[6]
            if image_list[i] == options.name:
                exists = True
        if not exists:
            print "That image does not exist on the repository."
        else:
            print "Deleting image "+options.name
            if options.force:
                repo.delete(options.name)
                sys.exit(2)
            if ask_yes_or_no(force=options.force):
                repo.delete(options.name)
            else:
                print "Exiting repoman."
                sys.exit(0)
if __name__ == "__main__":
    main() 
